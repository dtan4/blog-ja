<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wercker on blog-ja.dtan4.net</title><link>http://blog-ja.dtan4.net/tags/wercker/</link><description>Recent content in wercker on blog-ja.dtan4.net</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><copyright>Copyright &amp;copy; 2020 dtan4 All Rights Reserved</copyright><lastBuildDate>Mon, 16 May 2016 00:00:00 +0000</lastBuildDate><atom:link href="http://blog-ja.dtan4.net/tags/wercker/index.xml" rel="self" type="application/rss+xml"/><item><title>wercker の新機能 Wercker Workflows を試す</title><link>http://blog-ja.dtan4.net/posts/qiita-9bcf5dbfd3dbbd87472b/</link><pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate><guid>http://blog-ja.dtan4.net/posts/qiita-9bcf5dbfd3dbbd87472b/</guid><description>この記事はQiitaの記事をエクスポートしたものです。内容が古くなっている可能性があります。
プライベートリポジトリの CI 無料でお馴染みの wercker が、先日ワークフロー機能 Wercker Workflows をリリースしました。
とりあえず、以下の公式デモ動画を観れば何ができるのかわかると思います。
ブログ記事 :point_right: Introducing Wercker Workflows デモ動画 :point_right: Wercker Workflows - YouTube
Wercker Workflows とは いわゆるワークフロー機能というやつで、1つの CI プロセスを複数のパイプラインに分割して組み合わせる機能です。Jenkins とか、最近だと Concourse CI でお馴染みの機能です。
パイプラインは従来の build, deploy に相当するもので、1つの CI プロセス内におけるタスクの分割単位となります。従来は build, deploy の2つしか記述できなかったところ、test や push-dev のように複数種類のパイプラインを記述できるようになったのが今回の Workflows です。
以下の例では、Build, Tests, Push to registry, Notify Scheduler の4つのパイプラインを直列に実行しています。これだけだと従来の wercker とあまり変わりません。
_image from: http://wercker.com/workflows/_
Workflows では、複数のパイプラインを__並列に__実行することができます。以下の例は、ビルド後に開発用 (dev) イメージの push &amp;amp; deploy と本番用 (release) イメージの push &amp;amp; deploy を並列に実行しています。</description></item><item><title>Terraform と CI で実現するインフラのコード化と構築の自動化</title><link>http://blog-ja.dtan4.net/posts/qiita-ab1671d657f1571e59d8/</link><pubDate>Sat, 19 Dec 2015 00:00:00 +0000</pubDate><guid>http://blog-ja.dtan4.net/posts/qiita-ab1671d657f1571e59d8/</guid><description>この記事はQiitaの記事をエクスポートしたものです。内容が古くなっている可能性があります。
Wantedly Advent Calendar 2015 __18__日目です。
インフラチームインターンの @dtan4 です。
Wantedly では Terraform を用いたインフラのコード化 (Infrastructure as Code) を全面的に取り入れています。インフラリソースの追加や修正は、コードを書くこと・CI 上での自動適用によって行われています。
この記事では、今年5月から半年以上の間 Terraform を運用してきた中での
なぜ Terraform でインフラをコード化しようとしたのか どのように Terraform を運用しているのか Terraform 運用にあたって注意すべき点 既存リソースから Terraform コードを生成する Terraforming について ということを紹介したいと思います。
Terraform とは Terraform は、Vagrant などで有名な HashiCorp が作っている__コードからインフラリソースを作成する・コードでインフラを管理する__ためのツールです。AWS, GCP, Azure, DigitalOcean といったクラウドプロバイダや DNSimple, Mailgun, Rundeck を含む多くの SaaS に幅広く対応しています。
コードは JSON 互換である HCL (HashiCorp Configuration Language) で記述します。例えば AWS ELB と EC2 インスタンスは
# from https://www.</description></item></channel></rss>