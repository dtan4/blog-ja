<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jq on blog-ja.dtan4.net</title><link>http://blog-ja.dtan4.net/tags/jq/</link><description>Recent content in jq on blog-ja.dtan4.net</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><copyright>Copyright &amp;copy; 2020 dtan4 All Rights Reserved</copyright><lastBuildDate>Tue, 31 Jan 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://blog-ja.dtan4.net/tags/jq/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub Releases にアップロードしてある最新バージョンの成果物を取得するワンライナー</title><link>http://blog-ja.dtan4.net/posts/qiita-1a9f16ff881ac456c18f/</link><pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate><guid>http://blog-ja.dtan4.net/posts/qiita-1a9f16ff881ac456c18f/</guid><description>この記事はQiitaの記事をエクスポートしたものです。内容が古くなっている可能性があります。
e.g. dtan4/s3url 最新バージョンの Linux 64bit バイナリが入った tarball を取得する
$ curl -s https://api.github.com/repos/dtan4/s3url/releases | jq -r &amp;#39;.[0].assets[] | select(.name | test(&amp;#34;linux-amd64.tar.gz&amp;#34;)) | .browser_download_url&amp;#39; https://github.com/dtan4/s3url/releases/download/v0.3.1/s3url-v0.3.1-linux-amd64.tar.gz サーバに Go バイナリを配置していて定期的に更新したい場合は、このワンライナーと展開処理を行うスクリプトを cron とかで回しておけばよさそうです。
curl -s https://api.github.com/repos/dtan4/s3url/releases dtan4/s3url リポジトリの Releases を取得する GitHub API です。 Public リポジトリなら認証無しで叩けますが、その場合の呼出回数は1時間あたり最大60回となってるので、Access Token を付与するほうが安心です。
Releases | GitHub Developer Guide
jq -r -r オプションをつけると、ダブルクオートで囲まずそのまま文字列を返します。
.[0].assets[] 上記 API のレスポンスは Release 作成時刻 created_at 降順になっているので、先頭の要素が最新の Release となります。assets に成果物 (asset) のメタデータが配列で格納されてます。
select(.name | test(&amp;quot;linux-amd64.tar.gz&amp;quot;)) name フィールドが linux-amd64.</description></item><item><title>awscli + jq + peco + tmux-cssh を使って複数 EC2 インスタンスへ簡単 SSH</title><link>http://blog-ja.dtan4.net/posts/qiita-88545bbd2dcdb590b5a7/</link><pubDate>Mon, 28 Sep 2015 00:00:00 +0000</pubDate><guid>http://blog-ja.dtan4.net/posts/qiita-88545bbd2dcdb590b5a7/</guid><description>この記事はQiitaの記事をエクスポートしたものです。内容が古くなっている可能性があります。
TL;DR 必要なもの (awscli, jq, peco, tmux, tmux-cssh) をすべて入れた状態で
$ sh -c &amp;#34;tmux-cssh -i &amp;lt;ssh_key&amp;gt; -u &amp;lt;ssh_user&amp;gt; $(aws ec2 describe-instances | jq -r &amp;#39;.Reservations[] | .Instances[] | select(.State.Name != &amp;#34;terminated&amp;#34;) | select(has(&amp;#34;PublicIpAddress&amp;#34;)) | [.PublicIpAddress,.PrivateIpAddress,.State.Name,(.Tags[] | select(.Key == &amp;#34;Name&amp;#34;) | .Value // &amp;#34;&amp;#34;)] | join(&amp;#34;\t&amp;#34;)&amp;#39; | peco | awk &amp;#39;{ print $1 }&amp;#39; | tr &amp;#39;\n&amp;#39; &amp;#39; &amp;#39;)&amp;#34; とすることで、peco で EC2 インスタンスを選んで同時に SSH アクセスすることができます。
:warning: tmux 上で生活している方は、一度 tmux detach して tmux の外に出ないと tmux-cssh が実行できません。 また、ターミナル起動時に自動で tmux を立ち上げる設定は無効化しておく必要があります。</description></item></channel></rss>