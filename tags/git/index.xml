<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on blog-ja.dtan4.net</title><link>http://blog-ja.dtan4.net/tags/git/</link><description>Recent content in Git on blog-ja.dtan4.net</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><copyright>Copyright &amp;copy; 2020 dtan4 All Rights Reserved</copyright><lastBuildDate>Tue, 31 Jan 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://blog-ja.dtan4.net/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub にパスワードとかセンシティブなファイルを push してしまったときの対処法</title><link>http://blog-ja.dtan4.net/posts/qiita-34e41e3bd40a43fd8cbf/</link><pubDate>Sat, 19 Dec 2015 00:00:00 +0000</pubDate><guid>http://blog-ja.dtan4.net/posts/qiita-34e41e3bd40a43fd8cbf/</guid><description>この記事はQiitaの記事をエクスポートしたものです。内容が古くなっている可能性があります。
.gitignore し忘れて他人に見えちゃマズいファイル（パスワードをベタ書きしたファイルや AWS_SECRET_ACCESS_KEY を書いたファイルとか）を git commit しちゃった！そんなときは
$ git reset --hard HEAD~ すればすぐ何もなかったことにできます。
が！そこで気付かずに GitHub へ git push してしまった！こうなると容易に何もなかったことにはできません。
この記事では、こういうときに何もなかったことにする方法を紹介します。
そのデータを無効にする 特に Public Repository の場合はすでにそのデータが他人の目に触れていた…ということも十分ありえます。AWS_SECRET_ACCESS_KEY なんかは取得用のクローラが存在するとも聞きます。ので、まずは不正利用されても影響が出ないように、__パスワードの書き換えやトークンの無効化__を施しましょう。
（この時点でもう何もなかったことになってない気がする）
git の履歴から該当のファイルを消す git reset と git filter-branch 2つの方法があります。
git reset (2015-12-29 15:00 追記) git reset だとセンシティブファイル以外の作業履歴もすべて消去されてしまうので、それらを残しておきたい場合は後述 git filter-branch でコミットを書き換えるようにしてください。 (追記終わり)
該当ファイルを git commit してすぐ気づいた (3コミット以内) なら、まだ git reset で消せます。
$ git reset --hard HEAD~2 ＃ 消すコミットの数 git filter-branch 気づいたのはそこから何コミットもしたあと…だと git reset でそこまでの履歴を全部消すのは現実的ではありません。そんな時に役立つのが git filter-branch です。filter-branch は普段見慣れない（であってほしい）ですが、__大量のコミットを機械的に書き換える__コマンドです。今回みたいにファイルを消す以外にも、リポジトリ全体のコミットオーサーの書き換えとかも一発でできます。</description></item><item><title>peco で git のコミットハッシュを選択する alias</title><link>http://blog-ja.dtan4.net/posts/qiita-94ea5bd2f9475c72b9e9/</link><pubDate>Tue, 08 Jul 2014 00:00:00 +0000</pubDate><guid>http://blog-ja.dtan4.net/posts/qiita-94ea5bd2f9475c72b9e9/</guid><description>この記事はQiitaの記事をエクスポートしたものです。内容が古くなっている可能性があります。
いちいち git log からコミットハッシュを探しだすのが面倒なので、alias を定義してみました。
alias -g C=&amp;#39;`git log --oneline | peco | cut -d&amp;#34; &amp;#34; -f1`&amp;#39; 例えば、git show C では peco で選択したコミットの中身をみることができます。 git reset --hard C では選択したコミットまでロールバックできます。
また、reflog から選択する alias も定義しました。
alias -g R=&amp;#39;`git reflog | peco | cut -d&amp;#34; &amp;#34; -f1`&amp;#39; git reset --hard R では peco で選択した時点まで操作履歴をロールバックできます。
See also: dot.zsh/.zshrc.peco - dtan4/dot.zsh</description></item></channel></rss>