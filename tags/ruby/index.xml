<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ruby on blog-ja.dtan4.net</title><link>http://blog-ja.dtan4.net/tags/ruby/</link><description>Recent content in Ruby on blog-ja.dtan4.net</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><copyright>Copyright &amp;copy; 2020 dtan4 All Rights Reserved</copyright><lastBuildDate>Tue, 28 Mar 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://blog-ja.dtan4.net/tags/ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>手元の全 Ruby バージョンから特定の gem を一掃する</title><link>http://blog-ja.dtan4.net/posts/qiita-215f688a86d22c30362e/</link><pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate><guid>http://blog-ja.dtan4.net/posts/qiita-215f688a86d22c30362e/</guid><description>この記事はQiitaの記事をエクスポートしたものです。内容が古くなっている可能性があります。
(2017/03/29 10:50 追記)
rbenv でインストールしたバージョン全てに対してコマンドを実行する rbenv-each というプラグインがあったので、以下のコマンドでやりたいことが実現できました。
$ rbenv each gem uninstall -x gemname rbenv-each は @sakuro さんにコメントでご教示いただきました。ありがとうございました。
$ export GEM_NAME=gemname $ for v in `rbenv whence $GEM_NAME`; do rbenv shell $v; gem uninstall -x $GEM_NAME; rbenv shell --unset; done 昔 Ruby で作ったコマンドラインツールを Go で書き換えた、けど rbenv のパスが PATH の先頭寄りに書かれていて優先されてしまう（下の例）…というときに便利です。nodenv や plenv でも、適切なコマンドに入れ替えれば応用できそう。
$ gemname rbenv: gemname: command not found The `gemname' command exists in these Ruby versions: 2.3.0 2.</description></item><item><title>RubyGems 開発速習会</title><link>http://blog-ja.dtan4.net/posts/qiita-ea25b1c74346e330d5eb/</link><pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate><guid>http://blog-ja.dtan4.net/posts/qiita-ea25b1c74346e330d5eb/</guid><description>この記事はQiitaの記事をエクスポートしたものです。内容が古くなっている可能性があります。
この記事は、RubyGem 開発速習会@Wantedly の資料として作られたものです :exclamation:
この資料は、
Ruby 2.3.1 RubyGems 2.5.1 Bundler 1.12.4 の環境で執筆されました。
この速習会のゴール gem を一から作れるようになる ただ作るだけじゃなく、テスト駆動開発を取り入れた効率のよい開発ができるようにある 開発支援系のサービスに詳しくなる gem とは gem は、最もメジャーな Ruby ライブラリの形式です。 Ruby on Rails も1つの gem として提供されており、rails gem の中でもまた多くの gem が利用されています。 現在公開されている Ruby のソフトウェアや Ruby on Rails 上の Web サービスは、多くの gem を組み合わせることで成り立っているのです。
ちなみに www.wantedly.com では、Gemfile に書いてあるだけで__164個__の gem が使われています。
$ cat Gemfile | grep -E &amp;#39;^\s*gem&amp;#39; | wc -l 164 gem をインストールしたり探したりするときは、gem コマンドを利用します。</description></item><item><title>クラウドサービスを活用して README にバッジをペタペタ貼る</title><link>http://blog-ja.dtan4.net/posts/qiita-13b0ea9edf5b99926446/</link><pubDate>Sat, 31 Oct 2015 00:00:00 +0000</pubDate><guid>http://blog-ja.dtan4.net/posts/qiita-13b0ea9edf5b99926446/</guid><description>この記事はQiitaの記事をエクスポートしたものです。内容が古くなっている可能性があります。
最近の GitHub に上げてある OSS リポジトリには、README にいろんなバッジが貼られています。リポジトリに連携しているクラウドサービスのステータスを表すものがほとんどです。 自分は README にバッジを貼りたい派です。たとえば dtan4/terraforming だとこういう感じです。
最近はバッジの種類も増えているので、整理のためにもどういうのがあるかまとめてみようと思います。
自分がよく README に貼っているバッジ 自分が書く RubyGems については、以下の6個のバッジを必ずつけるようにしています。
Travis CI
言わずと知れた CI サービス。現在の master が CI 通っている (passing) かコケている (failed) かがわかります。リポジトリのメンテナンス状況を把握するのによいです。
クリックすれば、そのリポジトリのテスト結果を見ることができます。
Code Climate
ソースコードの品質チェックをしてくれるサービスです。リポジトリ内のコード重複や複雑性を解析して GPA (最高 4.0) を算出してくれます。このリポジトリのコード品質がどうであるか、をひと目で確認できます。Ruby の他にも Node.js や PHP, Python に対応してます。
最近はテストカバレッジの取得にも対応しました。Travis CI のテスト後にテストカバレッジが Code Climate へアップロードされます。 以前はテストカバレッジの表示に Coveralls を使っていましたが、Code Climate でひとまとめに見られるようになったので最近はこっちを使うようにしています。
クリックすれば、そのリポジトリの詳細な解析結果と行単位のテストカバレッジを見ることができます。
Gemnasium
アプリケーションの依存管理をチェックしてくれるサービスです。Ruby だと Gemfile, Gemfile.lock, *.gemspec を解析し、指定されている依存ライブラリのバージョンが古くなったら警告を出してくれます。Ruby の他にも Node.</description></item><item><title>OS X Yosemite で Nokogiri gem を bundle install</title><link>http://blog-ja.dtan4.net/posts/qiita-34c9ebd5ce7bfa0f133b/</link><pubDate>Tue, 24 Feb 2015 00:00:00 +0000</pubDate><guid>http://blog-ja.dtan4.net/posts/qiita-34c9ebd5ce7bfa0f133b/</guid><description>この記事はQiitaの記事をエクスポートしたものです。内容が古くなっている可能性があります。
mac nokogiri インストール でググれば山のように出てくるけど、一応自分のやった方法も書き残しておきます。
バージョン Mac OS X 10.10.2 Ruby 2.1.5 (by rbenv) Nokogiri 1.6.3.1 bundle install する 何も考えずに bundle install したら、libiconv が無いと言われました。
Gem::Ext::BuildError: ERROR: Failed to build gem native extension. /Users/dtan4/.anyenv/envs/rbenv/versions/2.1.5/bin/ruby -r ./siteconf20150224-35319-1dn56el.rb extconf.rb Building nokogiri using packaged libraries. ----- libiconv is missing. please visit http://nokogiri.org/tutorials/installing_nokogiri.html for help with installing dependencies. ----- *** extconf.rb failed *** Could not create Makefile due to some reason, probably lack of necessary libraries and/or headers.</description></item><item><title>Ruby で HTTP ステータスコード一覧を出力するワンライナー</title><link>http://blog-ja.dtan4.net/posts/qiita-19a28356320652cd48cc/</link><pubDate>Tue, 17 Feb 2015 00:00:00 +0000</pubDate><guid>http://blog-ja.dtan4.net/posts/qiita-19a28356320652cd48cc/</guid><description>この記事はQiitaの記事をエクスポートしたものです。内容が古くなっている可能性があります。
$ ruby -r rack/utils -e &amp;#39;Rack::Utils::HTTP_STATUS_CODES.each_pair { |code, desc| puts &amp;#34;#{code} #{desc}&amp;#34; }&amp;#39; 100 Continue 101 Switching Protocols 102 Processing 200 OK 201 Created 202 Accepted ... 500 Internal Server Error 501 Not Implemented 502 Bad Gateway 503 Service Unavailable 504 Gateway Timeout 505 HTTP Version Not Supported 506 Variant Also Negotiates 507 Insufficient Storage 508 Loop Detected 510 Not Extended 511 Network Authentication Required HTTP ステータスコード一覧、Rack の Rack::Util モジュールに定数定義されている（コード該当箇所）ので、それを引っ張ってきているだけ。 peco にリダイレクトして絞り込みとかできる。</description></item><item><title>Rack 1.6 な Sinatra アプリケーションに Docker コンテナ外からアクセスできなかった</title><link>http://blog-ja.dtan4.net/posts/qiita-c7c47b845b6f15c4076f/</link><pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate><guid>http://blog-ja.dtan4.net/posts/qiita-c7c47b845b6f15c4076f/</guid><description>この記事はQiitaの記事をエクスポートしたものです。内容が古くなっている可能性があります。
[2015-01-24 05:00] @5t111111 さんのコメントに基づき、Rack 1.6 のデフォルト挙動について追記 Rack 1.6.0 を使用した Sinatra アプリケーションを Docker 上で起動したところ、コンテナ外からの接続ができませんでした。EXPOSE 9292 して -p 9292:9292 しているにも関わらず、です。 とりあえずの対処法を書いておきます。
アプリケーション構成例 最小構成の Sinatra アプリケーションを Docker 上で動かすためのファイル例を Gist に上げました。
https://gist.github.com/dtan4/373907a001f3f3ebbd9c
はじめに言っておくと、Ruby のバージョンを変えること（2.1.5 にするとか）は解決になりませんでした。Ruby 2.2.0 のせいとかではない。
あと Docker のバージョンは （2015-01-21 最新の）1.4.1 です。
対処法1: Rack 1.5.2 を使う 一つ前のバージョンである Rack 1.5.2 であればこの問題は発生しません。Gemfile でバージョン指定しましょう。
gem &amp;quot;rack&amp;quot;, &amp;quot;~&amp;gt; 1.5.2&amp;quot; # or &amp;quot;= 1.5.2&amp;quot; 対処法2: rackup に -o 0.0.0.0 オプションをつける rackup --help より、
-o は ListenAddress を設定するためのオプションです。</description></item></channel></rss>